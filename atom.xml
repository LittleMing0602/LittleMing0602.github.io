<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-16T08:58:50.949Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Little Ming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>萃取</title>
    <link href="http://yoursite.com/2020/06/16/%E8%90%83%E5%8F%96/"/>
    <id>http://yoursite.com/2020/06/16/%E8%90%83%E5%8F%96/</id>
    <published>2020-06-16T07:49:42.846Z</published>
    <updated>2020-06-16T08:58:50.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Traits-编程技法（萃取）"><a href="#Traits-编程技法（萃取）" class="headerlink" title="Traits 编程技法（萃取）"></a>Traits 编程技法（萃取）</h1><p>不论是泛型思维还是STL的实际运用，迭代器都扮演着重要的角色。迭代器是一种行为类似指针的对象，在算法中运用迭代器时，很可能会用到其相关类型。其中的相关类型就包括迭代器所指的对象的类型。假设算法中有必要声明一个变量，其类型就是迭代器所指的对象的类型，但是输入参数却只有迭代器改怎么办？<br>c++并没有支持typeof()!</p><p>我们假设现在要实现一个算法func，其出入参数为迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Iter iter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果我们需要一个iter指向的类型的变量，</span></span><br><span class="line"><span class="comment">//该怎么声明呢?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法一：参数推导"><a href="#方法一：参数推导" class="headerlink" title="方法一：参数推导"></a>方法一：参数推导</h2><p>利用函数模板的参数推导机制(argument deducation)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">fun_impl</span>(<span class="title">I</span> <span class="title">iter</span>, <span class="title">T</span> <span class="title">t</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T tmp; <span class="comment">//这里已经申请好了需要的变量</span></span><br><span class="line"><span class="comment">//剩余的内容</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，func函数就可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Iter iter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func_impl(iter, *iter); <span class="comment">//将*iter传进去后，就知道了iter指向的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func函数将实际操作全部置于func_impl()之中，由于func_impl是一个函数模板，一旦被调用，编译器会自动进行template参数推导，于是导出类型T。</p><p>但是，当我们需要func的返回值是*iter的类型而不是void呢，我们连函数声明都写不出来！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型(不知道怎么写) func(Iter iter)</span><br><span class="line">&#123;</span><br><span class="line">func_impl(iter, *iter);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：参数推导机制无法推导返回值</p><h2 id="方法二：声明内嵌类型"><a href="#方法二：声明内嵌类型" class="headerlink" title="方法二：声明内嵌类型"></a>方法二：声明内嵌类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Iter</span>&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> T value_type;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">I</span>:</span>:<span class="function">value_type <span class="title">func</span><span class="params">(I iter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就成功写出了func函数。<br>看起来不错，但是却有个隐晦的陷阱：并不是所有迭代器都是class type。原生指针就不是！如果不是class type，就无法为它定义内嵌类型。但STL（以及整个泛型思维）绝对必须接受原生指针作为一种迭代器，所以上面这样还不够，有没有办法可以让上述的一般化概念针对特殊情况做特殊化处理呢？template partial specialization(偏特化）可以做到。</p><h2 id="方法三：萃取器"><a href="#方法三：萃取器" class="headerlink" title="方法三：萃取器"></a>方法三：萃取器</h2><p>下面这个类模板专门用来萃取迭代器的特性，而value_type正是迭代器的特性之一。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过这个萃取器萃取类型I的特性，换句话说，如果类型I定义了自己的value_type，那么iterator_traits<I>::value_type就是I::value_type。</p><p>如方法二定义的Iter结构，Iter中定义了自己的value_type，那么func就可以改写成：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">iterator_traits</span>&lt;I&gt;:</span>:<span class="function">value_type <span class="title">func</span><span class="params">(I iter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这除了多了一个中间层iterator_traits，又带来什么好处呢？<br>好处就是，iterator_traits可以拥有特化版本。现在，我们令iterator_traits拥有一个partial specializations如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt; //偏特化版，迭代器是个原生指针</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是当我们调用func传入的是原生指针时，通过偏特化版本同样可以萃取到value_type。<br>到此，我们就基本解决了迭代器的相关类型的问题了！</p><h2 id="迭代器相关类型"><a href="#迭代器相关类型" class="headerlink" title="迭代器相关类型"></a>迭代器相关类型</h2><p>根据经验， 最常用到的迭代器相关类型有五种：value_type, difference_type, pointer, reference, iterator_catagoly。如果你希望你所开发的容器能与STL水乳交融，一定要为你的容器的迭代器定义这五种类型。具体内容参照STL源码剖析的相关章节。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Traits-编程技法（萃取）&quot;&gt;&lt;a href=&quot;#Traits-编程技法（萃取）&quot; class=&quot;headerlink&quot; title=&quot;Traits 编程技法（萃取）&quot;&gt;&lt;/a&gt;Traits 编程技法（萃取）&lt;/h1&gt;&lt;p&gt;不论是泛型思维还是STL的实际运用，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/15/hello-world/"/>
    <id>http://yoursite.com/2020/06/15/hello-world/</id>
    <published>2020-06-15T09:36:54.543Z</published>
    <updated>2020-06-15T09:36:54.543Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
